# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sl0Fmn1jXRtkW2AQ5AJWmFvv_eGAwaGR
"""

import pandas as pd
import random

import pandas as pd

# Load the augmented dataset
try:
    augmented_df = pd.read_csv('/content/123_augmented_dataset.csv')
    print("Augmented dataset loaded successfully.")

    # Select 5 random rows
    random_diseases_with_symptoms = augmented_df.sample(5)

    # Display the selected rows (Disease and Symptom columns)
    symptom_columns = [col for col in augmented_df.columns if 'Symptom_' in col]
    display_cols = ['Disease'] + symptom_columns

    print("\nFive random diseases and their symptoms from the augmented dataset:")
    display(random_diseases_with_symptoms[display_cols])

except FileNotFoundError:
    print("Error: The file '/content/123_augmented_dataset.csv' was not found.")
    augmented_df = None

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier

# ----------------------------------------
# 1️⃣ اقرأ الداتا
# تأكد أنك تستخدم ملف البيانات الصحيح الذي يحتوي على أعمدة الأعراض
# (يفضل استخدام الملف الذي قمت بتوحيد الأعراض فيه إذا كان ذلك قد تم)
df = pd.read_csv('/content/123_augmented_dataset.csv') # أو ملف البيانات الموحد إن وجد

# ----------------------------------------
# 2️⃣ تحويل أعمدة الأعراض إلى تمثيل رقمي (One-Hot Encoding/Binarization)

# حدد أعمدة الأعراض بناءً على النمط
symptom_columns = [col for col in df.columns if 'Symptom_' in col]

# قم بإنشاء مجموعة (set) بجميع الأعراض الفريدة الموجودة في الأعمدة المحددة
# وتأكد من استثناء قيمة 'No Symptom' إن وجدت
all_unique_symptoms = set()
for col in symptom_columns:
    # تأكد من التعامل مع القيم غير الصحيحة إن وجدت قبل تطبيق str.strip()
    valid_symptoms = df[col].dropna().astype(str).str.strip().unique()
    all_unique_symptoms.update(valid_symptoms)

# قم بإزالة "No Symptom" من مجموعة الأعراض الفريدة إن وجدت
if 'No Symptom' in all_unique_symptoms:
    all_unique_symptoms.remove('No Symptom')

# إنشاء DataFrame جديد يمثل الميزات الرقمية
# كل عمود في هذا DataFrame الجديد سيمثل عرضاً فريداً
X_processed = pd.DataFrame(0, index=df.index, columns=list(all_unique_symptoms))

# ملء DataFrame الجديد بالقيم 1 حيث يكون العرض موجوداً في الصف الأصلي
for index, row in df.iterrows():
    for col in symptom_columns:
        symptom = str(row[col]).strip() # تأكد من التعامل مع القيم غير الصحيحة
        if symptom != 'No Symptom' and symptom in X_processed.columns:
             X_processed.loc[index, symptom] = 1

# استخدم DataFrame الجديد المعالج كـ X
X = X_processed
y = df['Disease'] # عمود الهدف (الأمراض) يبقى كما هو

# ----------------------------------------
# 3️⃣ قسّم Train/Test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ----------------------------------------
# 4️⃣ جهّز الموديلات
models = {
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(n_estimators=100),
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5)
}

# ----------------------------------------
# 5️⃣ درّب كل موديل واحسب الـ Accuracy
results = {}

for name, model in models.items():
    # تأكد من أن أنواع البيانات في X_train مناسبة للموديل
    # في هذه الحالة، X_train يجب أن تحتوي على أرقام (0 أو 1)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    results[name] = acc

# ----------------------------------------
# 6️⃣ اطبع النتايج
print("\n✅ ✅ ✅ Accuracy Results:")
for name, acc in results.items():
    print(f"{name}: {acc:.2f}")

# Check the number of disease entries and unique diseases in the training data
if 'y_train' in locals():
    total_diseases_train = y_train.shape[0]
    unique_diseases_train = y_train.nunique()

    print(f"Total number of disease entries in training data: {total_diseases_train}")
    print(f"Number of unique diseases in training data: {unique_diseases_train}")
else:
    print("Training data (y_train) not found. Please run the model training cell first.")

# Check the number of disease entries and unique diseases in the test data
if 'y_test' in locals():
    total_diseases_test = y_test.shape[0]
    unique_diseases_test = y_test.nunique()

    print(f"Total number of disease entries in test data: {total_diseases_test}")
    print(f"Number of unique diseases in test data: {unique_diseases_test}")
else:
    print("Test data (y_test) not found. Please run the model training cell first.")

from sklearn.model_selection import train_test_split

# اعمل تقسيم جديد بالداتا بتاعتك
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# كده بتضمن إن كل الأمراض تقريبًا موجودة في Train و Test.

import pandas as pd
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# اقرأ الداتا
df = pd.read_csv('/content/123_augmented_dataset.csv')

# ----------------------------------------
# تحويل أعمدة الأعراض إلى تمثيل رقمي (One-Hot Encoding/Binarization)

# حدد أعمدة الأعراض بناءً على النمط
symptom_columns = [col for col in df.columns if 'Symptom_' in col]

# قم بإنشاء مجموعة (set) بجميع الأعراض الفريدة الموجودة في الأعمدة المحددة
all_unique_symptoms = set()
for col in symptom_columns:
    valid_symptoms = df[col].dropna().astype(str).str.strip().unique()
    all_unique_symptoms.update(valid_symptoms)

# قم بإزالة "No Symptom" من مجموعة الأعراض الفريدة إن وجدت
if 'No Symptom' in all_unique_symptoms:
    all_unique_symptoms.remove('No Symptom')

# إنشاء DataFrame جديد يمثل الميزات الرقمية
X_processed = pd.DataFrame(0, index=df.index, columns=list(all_unique_symptoms))

# ملء DataFrame الجديد بالقيم 1 حيث يكون العرض موجوداً في الصف الأصلي
for index, row in df.iterrows():
    for col in symptom_columns:
        symptom = str(row[col]).strip()
        if symptom != 'No Symptom' and symptom in X_processed.columns:
             X_processed.loc[index, symptom] = 1

# استخدم DataFrame الجديد المعالج كـ X
X = X_processed
y = df['Disease'] # عمود الهدف (الأمراض) يبقى كما هو


# تقسيم بالداتا لو مش عاملها قبل كده
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# درّب الموديل الأساسي
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)

# تنبؤات
y_pred = model.predict(X_test)

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred, labels=model.classes_)

# Visualization
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)
fig, ax = plt.subplots(figsize=(15, 15))
disp.plot(ax=ax, cmap='Blues')
plt.xticks(rotation=90)
plt.title('Confusion Matrix')
plt.show()

from sklearn.model_selection import cross_val_score

scores = cross_val_score(model, X, y, cv=5)
print(f"✅ متوسط Cross-Validation Accuracy: {scores.mean():.2f}")

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 5, 10],
    'min_samples_split': [2, 5, 10]
}

grid = GridSearchCV(RandomForestClassifier(), param_grid, cv=3, verbose=2, n_jobs=-1)
grid.fit(X_train, y_train)

print("✅ أفضل باراميترز:", grid.best_params_)
print(f"✅ أحسن Accuracy: {grid.best_score_:.2f}")

import pandas as pd
import joblib

# 1️⃣ حمّل الموديل اللي حفظته
# Ensure the model file exists before loading
try:
    model = joblib.load('best_disease_predictor.pkl')
    print("Model loaded successfully.")
except FileNotFoundError:
    print("Error: Model file 'best_disease_predictor.pkl' not found. Please train and save the model first.")
    model = None # Set model to None if loading fails

# Ensure the list of all unique symptoms is available from the data processing step
if 'all_unique_symptoms' in locals() and model is not None:
    print("List of all unique symptoms found. Ready for prediction setup.")

    # 2️⃣ دي نفس قايمة الأعراض بتاعتك (هذه القائمة الآن يتم استخلاصها من all_unique_symptoms)
    # The columns for the input DataFrame should be all unique symptoms the model was trained on
    model_symptom_columns = list(all_unique_symptoms)


    # 3️⃣ جرب تديله أعراض manually
    # مثلا جرب واحد عنده:
    # joint_pain + nausea + dark_urine
    selected_symptoms = ['joint_pain', 'nausea', 'dark_urine'] # يمكنك تغيير هذه القائمة

    # 4️⃣ حولهم لـ One-Hot Encoding بنفس هيكل بيانات التدريب
    # Create a DataFrame with all unique symptoms as columns, initialized to 0
    input_df = pd.DataFrame(0, index=[0], columns=model_symptom_columns)

    # Set value to 1 for the symptoms provided in selected_symptoms
    for symptom in selected_symptoms:
        # Check if the selected symptom is one of the unique symptoms the model knows
        if symptom in input_df.columns:
            input_df[symptom] = 1
        else:
            print(f"Warning: Symptom '{symptom}' not recognized by the model.")


    # 5️⃣ اعملهم DataFrame عشان تدخلهم الموديل (تم ذلك في الخطوة 4)
    # input_df is now ready

    # 6️⃣ شغّل الموديل وشوف التشخيص
    try:
        prediction = model.predict(input_df)[0]
        print(f"\n✅ المرض المتوقع: {prediction}")
    except Exception as e:
        print(f"Error during prediction: {e}")

elif model is None:
    print("Model was not loaded due to previous error.")
else:
    print("Error: The list of 'all_unique_symptoms' was not found. Please run the data processing cell (cell 7CItuXWIyy4Z) first.")

